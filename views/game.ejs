<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="styles/css/main.css">
        <title>Document</title>
    </head>
    <body>
        <div class="content-wrapper">
            <img src="content/background-star.svg" id="background-star">
        </div>
        <div id="timer">
            30s
        </div>
        <div class="container" style="display: flex; height: 100%;">
            <div class="pair-wrapper">
                <div class="pair-key-wrapper">
                    <div class="pair-mobile-arrow pair-mobile-arrow-left" id="prev-key-pair"></div>
                    <% pairs.keys.forEach((key, index) => { %>
                        <div class="pair-block pair-key-block" tabindex="<%= index+1 %>" data-target="<%= key.target %>" data-connection="none" data-id="<%= index %>" <%= index == 0 ? 'selected=true' : "" %>>
                            <p><%= key.value %></p>

                            <svg width="41" height="52" viewBox="0 0 41 52" fill="none" xmlns="http://www.w3.org/2000/svg" class="anchor-point anchor-point-right">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M28 52V0H23V52H28Z" fill="black"/>
                                <path d="M23 52V0H0V52H23Z" fill="white"/>
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M25 10C24.3227 10 23.6552 10.0421 23 10.1238V41.8762C23.6552 41.9579 24.3227 42 25 42C33.8366 42 41 34.8366 41 26C41 17.1634 33.8366 10 25 10Z" fill="white"/>
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M25 37C24.317 37 23.6486 36.9378 23 36.8186V41.8762C23.6552 41.9579 24.3227 42 25 42C33.8366 42 41 34.8366 41 26C41 17.1634 33.8366 10 25 10C24.3227 10 23.6552 10.0421 23 10.1238V15.1814C23.6486 15.0622 24.317 15 25 15C31.0751 15 36 19.9249 36 26C36 32.0751 31.0751 37 25 37Z" fill="black"/>
                                <rect x="18" y="19" width="14" height="14" rx="7" fill="currentColor"/>
                            </svg>
                        </div>
                    <% }) %>
                    <div class="pair-mobile-arrow pair-mobile-arrow-right"id="next-key-pair"></div>
                </div>
                <div class="pair-value-wrapper">
                    <div class="pair-mobile-arrow pair-mobile-arrow-left" id="prev-value-pair"></div>
                    <% pairs.values.forEach((value, index) => { %>
                        <div class="pair-block pair-value-block" tabindex="<%= index+6 %>" data-slug="<%= value.slug %>" data-connection="none" data-id="<%= index %>" <%= index == 0 ? 'selected=true' : "" %>>
                            <!-- <img src="content/<%= value.slug %>.svg" /> -->
                            <p><%= value.name %></p>

                            <svg width="41" height="52" viewBox="0 0 41 52" fill="none" xmlns="http://www.w3.org/2000/svg" class="anchor-point anchor-point-left">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M28 52V0H23V52H28Z" fill="black"/>
                                <path d="M23 52V0H0V52H23Z" fill="white"/>
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M25 10C24.3227 10 23.6552 10.0421 23 10.1238V41.8762C23.6552 41.9579 24.3227 42 25 42C33.8366 42 41 34.8366 41 26C41 17.1634 33.8366 10 25 10Z" fill="white"/>
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M25 37C24.317 37 23.6486 36.9378 23 36.8186V41.8762C23.6552 41.9579 24.3227 42 25 42C33.8366 42 41 34.8366 41 26C41 17.1634 33.8366 10 25 10C24.3227 10 23.6552 10.0421 23 10.1238V15.1814C23.6486 15.0622 24.317 15 25 15C31.0751 15 36 19.9249 36 26C36 32.0751 31.0751 37 25 37Z" fill="black"/>
                                <rect x="18" y="19" width="14" height="14" rx="7" fill="currentColor"/>
                            </svg>
                        </div>
                    <% }) %>
                    <div class="pair-mobile-arrow pair-mobile-arrow-right"id="next-value-pair"></div>
                </div>

                <button class="mobile-connect-button" tabindex="11">CONNECT!</button>
                <button class="mobile-disconnect-button" tabindex="12">DISCONNECT!</button>
            </div>
        </div>
    </body>
</html>

<script defer>
const vector1 = { x: 0, y: 0 }
const vector2 = { x: 0, y: 0 }

let timerInterval
let timerStarted = false
let timeLeftDefault = 30
let timeLeft = 30

let connections = []
let matches = []

const updateConnectionReferences = () => {
    matches = []
    let pairKeyBlocks = Array.from(document.querySelectorAll(".pair-key-block"))

    pairKeyBlocks.forEach(keyBlock => {
        let connection = keyBlock.getAttribute("data-connection")
        let target = keyBlock.getAttribute("data-target")
        
        if (connection != "none") {
            if (!connections.includes(keyBlock)) {
                connections.push(keyBlock)
            }
            let valueBlock = document.querySelector(`.pair-value-block[data-id="${connection}"]`)
            let slug = valueBlock.getAttribute("data-slug")

            if (target == slug) {
                if (!matches.includes(target)) {
                    matches.push(target)
                }
            }
        }
    })

    if (connections.length >= 5) {
        // show submit button
        // stopTimer()
    } else {
        // hide submit button
    }
}

const timerElem = document.querySelector("#timer")
const setupTimer = () => {
    if (!timerStarted) {
        timerStarted = true
        timerInterval = setInterval(() => {
            timerElem.innerText = `${timeLeft}s`
            timeLeft--;

            if (timeLeft+1 == 0) {
                clearInterval(timerInterval)
            }
        }, 1000)
    }
}

const stopTimer = () => {
    if (timerStarted) {
        timerStarted = false
        clearInterval(timerInterval)
    }
}

const prevKeyPairArrow = document.querySelector("#prev-key-pair")
const nextKeyPairArrow = document.querySelector("#next-key-pair")

const prevValuePairArrow = document.querySelector("#prev-value-pair")
const nextValuePairArrow = document.querySelector("#next-value-pair")

const checkPrevious = (elem) => elem.previousElementSibling && elem.previousElementSibling.classList.contains("pair-block")
const checkNext = (elem) => elem.nextElementSibling && elem.nextElementSibling.classList.contains("pair-block")

let selectedKeyBlock = document.querySelector(".pair-key-wrapper .pair-block[selected=true]")
let selectedValueBlock = document.querySelector(".pair-value-wrapper .pair-block[selected=true]")

prevKeyPairArrow.toggleAttribute("disabled", !checkPrevious(selectedKeyBlock))
nextKeyPairArrow.toggleAttribute("disabled", !checkNext(selectedKeyBlock))

prevValuePairArrow.toggleAttribute("disabled", !checkPrevious(selectedKeyBlock))
nextValuePairArrow.toggleAttribute("disabled", !checkNext(selectedKeyBlock))

prevKeyPairArrow.onpointerdown = e => {
    setupTimer()
    selectedKeyBlock = document.querySelector(".pair-key-wrapper .pair-block[selected=true]")

    if (checkPrevious(selectedKeyBlock)) {
        selectedKeyBlock.removeAttribute("selected")
        selectedKeyBlock.previousElementSibling.setAttribute("selected", true)
        selectedKeyBlock = document.querySelector(".pair-key-wrapper .pair-block[selected=true]")
    }

    prevKeyPairArrow.toggleAttribute("disabled", !checkPrevious(selectedKeyBlock))
    nextKeyPairArrow.toggleAttribute("disabled", !checkNext(selectedKeyBlock))
}
nextKeyPairArrow.onpointerdown = e => {
    setupTimer()
    selectedKeyBlock = document.querySelector(".pair-key-wrapper .pair-block[selected=true]")

    if (checkNext(selectedKeyBlock)) {
        selectedKeyBlock.removeAttribute("selected")
        selectedKeyBlock.nextElementSibling.setAttribute("selected", true)
        selectedKeyBlock = document.querySelector(".pair-key-wrapper .pair-block[selected=true]")
    }

    prevKeyPairArrow.toggleAttribute("disabled", !checkPrevious(selectedKeyBlock))
    nextKeyPairArrow.toggleAttribute("disabled", !checkNext(selectedKeyBlock))
}

prevValuePairArrow.onpointerdown = e => {
    setupTimer()
    selectedValueBlock = document.querySelector(".pair-value-wrapper .pair-block[selected=true]")

    if (checkPrevious(selectedValueBlock)) {
        selectedValueBlock.removeAttribute("selected")
        selectedValueBlock.previousElementSibling.setAttribute("selected", true)
        selectedValueBlock = document.querySelector(".pair-value-wrapper .pair-block[selected=true]")
    }

    prevValuePairArrow.toggleAttribute("disabled", !checkPrevious(selectedValueBlock))
    nextValuePairArrow.toggleAttribute("disabled", !checkNext(selectedValueBlock))
}
nextValuePairArrow.onpointerdown = e => {
    setupTimer()
    selectedValueBlock = document.querySelector(".pair-value-wrapper .pair-block[selected=true]")

    if (checkNext(selectedValueBlock)) {
        selectedValueBlock.removeAttribute("selected")
        selectedValueBlock.nextElementSibling.setAttribute("selected", true)
        selectedValueBlock = document.querySelector(".pair-value-wrapper .pair-block[selected=true]")
    }

    prevValuePairArrow.toggleAttribute("disabled", !checkPrevious(selectedValueBlock))
    nextValuePairArrow.toggleAttribute("disabled", !checkNext(selectedValueBlock))
}

let keyPairBlocks = document.querySelectorAll(".pair-key-wrapper .pair-block")
let valuePairBlocks = document.querySelectorAll(".pair-value-wrapper .pair-block")

let selecting = null;

keyPairBlocks.forEach(block => {
    block.onpointerdown = e => {
        setupTimer()
        if (!selecting && block.getAttribute("data-connection") == "none") {
            selecting = block
            selecting.setAttribute("data-selecting", "key")
            updateWire()
        } else {
            if (selecting)
            switch(selecting.parentElement.className) {
                case "pair-key-wrapper":
                    // NO LINK
                    break;
                case "pair-value-wrapper":
                    // LINK
                    if (block.getAttribute("data-connection") == "none") {
                        block.setAttribute("data-connection", selecting.getAttribute("data-id"))
                        selecting.setAttribute("data-connection", block.getAttribute("data-id"))
                        updateConnectionReferences()
                        setWire(block, selecting)
                        block.setAttribute("data-selecting", "none")
                        selecting.setAttribute("data-selecting", "none")
                        
                        selecting = null
                    }
                    break;
            }
        }
    }
})

valuePairBlocks.forEach(block => {
    block.onpointerdown = e => {
        setupTimer()
        if (!selecting && block.getAttribute("data-connection") == "none") {
            selecting = block
            selecting.setAttribute("data-selecting", "value")
            updateWire(true)
        } else {
            if (selecting)
            switch(selecting.parentElement.className) {
                case "pair-key-wrapper":
                    // LINK
                    if (block.getAttribute("data-connection") == "none") {
                        block.setAttribute("data-connection", selecting.getAttribute("data-id"))
                        selecting.setAttribute("data-connection", block.getAttribute("data-id"))
                        block.setAttribute("data-selecting", "none")
                        selecting.setAttribute("data-selecting", "none")
                        updateConnectionReferences()
                        setWire(selecting, block)
                        selecting = null
                    }
                    break;
                case "pair-value-wrapper":
                    // NO LINK
                    break;
            }
        }
    }
})

const setWire = (elem1, elem2) => {
    vector1.x = elem1.getBoundingClientRect().left + elem1.getBoundingClientRect().width
    vector1.y = elem1.getBoundingClientRect().top + (elem1.getBoundingClientRect().height / 2)

    vector2.x = elem2.getBoundingClientRect().left
    vector2.y = elem2.getBoundingClientRect().top + (elem2.getBoundingClientRect().height / 2)

    let distance = Math.sqrt(Math.pow(vector2.x - vector1.x, 2) + Math.pow(vector2.y - vector1.y, 2)) + 10
    let angleRadians = Math.atan2(vector2.y - vector1.y, vector2.x - vector1.x)
    let angleDegrees = angleRadians * (180 / Math.PI)

    elem1.style.setProperty('--distance', `${distance}px`)
    elem1.style.setProperty('--angle', `${angleDegrees}deg`)
}

const updateConnectedWires = () => {
    keyPairBlocks.forEach(block => {
        // for each key check value
        let connection
        if (block.hasAttribute("data-connection")) {
            // is connection
            connection = document.querySelector(`.pair-value-block[data-id="${block.getAttribute("data-connection")}"]`)
        }

        if (connection) {
            setWire(block, connection)
        }
    })
}

const updateWire = (isValuePair = false) => {
    if (!isValuePair) {
        vector1.x = selecting.getBoundingClientRect().left + selecting.getBoundingClientRect().width
        vector1.y = selecting.getBoundingClientRect().top

        vector2.x = event.clientX + 10
        vector2.y = event.clientY - 40

        let distance = Math.sqrt(Math.pow(vector2.x - vector1.x, 2) + Math.pow(vector2.y - vector1.y, 2))
        let angleRadians = Math.atan2(vector2.y - vector1.y, vector2.x - vector1.x)
        let angleDegrees = angleRadians * (180 / Math.PI)

        selecting.style.setProperty('--distance', `${distance}px`)
        selecting.style.setProperty('--angle', `${angleDegrees}deg`)
    } else 
    {
        vector2.x = selecting.getBoundingClientRect().left
        vector2.y = selecting.getBoundingClientRect().top

        vector1.x = event.clientX - 10
        vector1.y = event.clientY - 40

        let distance = Math.sqrt(Math.pow(vector2.x - vector1.x, 2) + Math.pow(vector2.y - vector1.y, 2))
        let angleRadians = Math.atan2(vector2.y - vector1.y, vector2.x - vector1.x)
        let angleDegrees = angleRadians * (180 / Math.PI)

        selecting.style.setProperty('--distance', `${distance}px`)
        selecting.style.setProperty('--angle', `${angleDegrees}deg`)
    }
}

window.onmousemove = e => {
    if (selecting) {
        updateWire(selecting.getAttribute("data-selecting") == "value")
    }
}

window.onresize = e => {
    updateConnectedWires()
}

</script>